import React, { useState } from "react";
import { motion } from "framer-motion";
import { Mic, Send } from "lucide-react";

// D·ªØ li·ªáu m√¥ ph·ªèng tr√≠ch xu·∫•t t·ª´ gi√°o tr√¨nh Marx-Lenin
const marxLeninQA: { keywords: string[]; answer: string }[] = [
  {
    keywords: ["d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a", "d√¢n ch·ªß"],
    answer:
      "D√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a l√† n·ªÅn d√¢n ch·ªß r·ªông r√£i, b·∫£o ƒë·∫£m quy·ªÅn l·ª±c th·ª±c s·ª± thu·ªôc v·ªÅ nh√¢n d√¢n, do nh√¢n d√¢n, v√¨ nh√¢n d√¢n, ƒë∆∞·ª£c th·ª±c hi·ªán th√¥ng qua nh√† n∆∞·ªõc ph√°p quy·ªÅn x√£ h·ªôi ch·ªß nghƒ©a.",
  },
  {
    keywords: ["nh√† n∆∞·ªõc ph√°p quy·ªÅn", "nh√† n∆∞·ªõc"],
    answer:
      "Nh√† n∆∞·ªõc ph√°p quy·ªÅn x√£ h·ªôi ch·ªß nghƒ©a ·ªü Vi·ªát Nam l√† nh√† n∆∞·ªõc c·ªßa nh√¢n d√¢n, do nh√¢n d√¢n, v√¨ nh√¢n d√¢n, qu·∫£n l√Ω x√£ h·ªôi b·∫±ng ph√°p lu·∫≠t, b·∫£o ƒë·∫£m quy·ªÅn con ng∆∞·ªùi, quy·ªÅn c√¥ng d√¢n.",
  },
  {
    keywords: ["quy·ªÅn l·ª±c nh√† n∆∞·ªõc", "quy·ªÅn l·ª±c"],
    answer:
      "Quy·ªÅn l·ª±c nh√† n∆∞·ªõc x√£ h·ªôi ch·ªß nghƒ©a thu·ªôc v·ªÅ nh√¢n d√¢n, ƒë∆∞·ª£c ph√¢n c√¥ng, ph·ªëi h·ª£p v√† ki·ªÉm so√°t gi·ªØa c√°c c∆° quan l·∫≠p ph√°p, h√†nh ph√°p, t∆∞ ph√°p.",
  },
  {
    keywords: ["ph√°p lu·∫≠t", "lu·∫≠t"],
    answer:
      "Ph√°p lu·∫≠t l√† c√¥ng c·ª• quan tr·ªçng ƒë·ªÉ qu·∫£n l√Ω x√£ h·ªôi, b·∫£o ƒë·∫£m c√¥ng b·∫±ng, d√¢n ch·ªß v√† ti·∫øn b·ªô x√£ h·ªôi.",
  },
  {
    keywords: ["quy·ªÅn con ng∆∞·ªùi", "quy·ªÅn c√¥ng d√¢n"],
    answer:
      "Nh√† n∆∞·ªõc ph√°p quy·ªÅn x√£ h·ªôi ch·ªß nghƒ©a b·∫£o ƒë·∫£m v√† th√∫c ƒë·∫©y quy·ªÅn con ng∆∞·ªùi, quy·ªÅn c√¥ng d√¢n, t·∫°o ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn to√†n di·ªán cho m·ªçi ng∆∞·ªùi.",
  },
  {
    keywords: ["b·∫ßu c·ª≠", "·ª©ng c·ª≠"],
    answer:
      "Nh√¢n d√¢n c√≥ quy·ªÅn b·∫ßu c·ª≠, ·ª©ng c·ª≠, tham gia qu·∫£n l√Ω nh√† n∆∞·ªõc v√† x√£ h·ªôi, th·ªÉ hi·ªán b·∫£n ch·∫•t d√¢n ch·ªß c·ªßa ch·∫ø ƒë·ªô x√£ h·ªôi ch·ªß nghƒ©a.",
  },
  {
    keywords: ["ki·ªÉm so√°t quy·ªÅn l·ª±c", "ph√¢n c√¥ng quy·ªÅn l·ª±c"],
    answer:
      "Ph√¢n c√¥ng, ph·ªëi h·ª£p v√† ki·ªÉm so√°t quy·ªÅn l·ª±c nh√† n∆∞·ªõc l√† nguy√™n t·∫Øc quan tr·ªçng c·ªßa nh√† n∆∞·ªõc ph√°p quy·ªÅn x√£ h·ªôi ch·ªß nghƒ©a.",
  },
];

function getMarxLeninAnswer(input: string): string {
  const lower = input.toLowerCase();
  for (const qa of marxLeninQA) {
    if (qa.keywords.some((kw) => lower.includes(kw))) return qa.answer;
  }
  return "Xin h√£y h·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ trong gi√°o tr√¨nh Marx-Lenin v·ªÅ d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a v√† nh√† n∆∞·ªõc ph√°p quy·ªÅn!";
}

const VoiceChatbot: React.FC = () => {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<
    { role: "user" | "bot"; text: string }[]
  >([]);
  const [listening, setListening] = useState(false);
  const [speaking, setSpeaking] = useState(false);

  // M√¥ ph·ªèng voice: ch·ªâ hi·ªÉn th·ªã icon, kh√¥ng th·ª±c s·ª± nh·∫≠n di·ªán gi·ªçng n√≥i
  const handleVoice = () => {
    setListening(true);
    setTimeout(() => {
      setInput("D√¢n ch·ªß l√† g√¨?");
      setListening(false);
    }, 1200);
  };

  // Google TTS API (Web Speech API)
  const speak = (text: string) => {
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      setSpeaking(true);
      const utter = new window.SpeechSynthesisUtterance(text);
      utter.lang = "vi-VN";
      utter.rate = 1;
      utter.onend = () => setSpeaking(false);
      window.speechSynthesis.speak(utter);
    }
  };

  const handleSend = () => {
    if (!input.trim()) return;
    setMessages((prev) => [...prev, { role: "user", text: input }]);
    setTimeout(() => {
      const answer = getMarxLeninAnswer(input);
      setMessages((prev) => [...prev, { role: "bot", text: answer }]);
      speak(answer);
    }, 800);
    setInput("");
  };

  return (
    <motion.div
      className="w-full max-w-md bg-white/80 rounded-xl shadow-xl p-6 backdrop-blur border border-white/30"
      initial={{ opacity: 0, y: 40 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.7, delay: 0.2 }}
    >
      <h2 className="text-xl font-bold mb-2 text-gray-800">
        Chatbot AI gi√°o tr√¨nh Marx-Lenin
      </h2>
      <div className="h-48 overflow-y-auto flex flex-col gap-2 mb-4">
        {messages.length === 0 && (
          <div className="text-gray-500 text-center mt-8">
            H√£y h·ªèi v·ªÅ d√¢n ch·ªß, nh√† n∆∞·ªõc ph√°p quy·ªÅn...
          </div>
        )}
        {messages.map((msg, idx) => (
          <motion.div
            key={idx}
            className={`rounded-lg px-3 py-2 max-w-[80%] text-sm ${
              msg.role === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-200 text-gray-800 self-start"
            }`}
            initial={{ opacity: 0, x: msg.role === "user" ? 40 : -40 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.3 }}
          >
            {msg.text}
            {msg.role === "bot" && idx === messages.length - 1 && speaking && (
              <span className="ml-2 animate-pulse text-blue-500">üîä</span>
            )}
          </motion.div>
        ))}
      </div>
      <div className="flex items-center gap-2">
        <button
          className={`p-2 rounded-full border border-gray-300 bg-white hover:bg-gray-100 transition ${
            listening ? "animate-pulse" : ""
          }`}
          onClick={handleVoice}
          aria-label="Voice input"
        >
          <Mic className="w-5 h-5 text-gray-700" />
        </button>
        <input
          className="flex-1 px-3 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white"
          placeholder="Nh·∫≠p c√¢u h·ªèi..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && handleSend()}
        />
        <button
          className="p-2 rounded-full bg-blue-500 hover:bg-blue-600 transition text-white"
          onClick={handleSend}
          aria-label="Send"
        >
          <Send className="w-5 h-5" />
        </button>
      </div>
    </motion.div>
  );
};

export default VoiceChatbot;
